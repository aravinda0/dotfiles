extends javascript

priority 1


# -------------------------------------------------------------------------------
# General Utilities
# -------------------------------------------------------------------------------

global !p
_underscorer1 = re.compile(r"(.)([A-Z][a-z]+)")
_underscorer2 = re.compile("([a-z0-9])([A-Z])")

def camel_to_upper_snake(name):
	subbed = _underscorer1.sub(r"\1_\2", name)
	return _underscorer2.sub(r"\1_\2", subbed).upper()


def camel_to_pascal(name):
	return (name[:1].upper() + name[1:])


def pascal_to_camel(name):
	return (name[:1].lower() + name[1:])

endglobal


# -------------------------------------------------------------------------------
# Redux Snippets
# -------------------------------------------------------------------------------

snippet rata "Redux async actions" b
$1_REQUEST = "$2.$1_REQUEST",
$1_SUCCESS = "$2.$1_SUCCESS",
$1_FAILURE = "$2.$1_FAILURE",
endsnippet


snippet raa "Redux async actions" b
export interface `!p snip.rv = camel_to_pascal(t[1])`RequestPayload {
	$0
}
export const $1Request = createAction<`!p snip.rv = camel_to_pascal(t[1])`RequestPayload> (
	ActionTypes.`!p snip.rv = camel_to_upper_snake(t[1])`_REQUEST
);

export interface `!p snip.rv = camel_to_pascal(t[1])`SuccessPayload {

}
export const `!p snip.rv = pascal_to_camel(t[1])`Success = createAction<`!p snip.rv = camel_to_pascal(t[1])`SuccessPayload> (
	ActionTypes.`!p snip.rv = camel_to_upper_snake(t[1])`_SUCCESS
);

export const `!p snip.rv = pascal_to_camel(t[1])`Failure = createAction<ActionFailurePayload> (
	ActionTypes.`!p snip.rv = camel_to_upper_snake(t[1])`_FAILURE
);
endsnippet


snippet saga "Redux saga" b
function* handle$1 (action: any) {
	const { $2 } = action.payload as actions.`!p snip.rv = camel_to_pascal(t[1])`Payload;

	$0
}
function* watch`!p snip.rv = camel_to_pascal(t[1])` () {
	yield takeLatest(
		ActionTypes.`!p snip.rv = camel_to_upper_snake(t[1])`, handle`!p snip.rv = camel_to_pascal(t[1])`
	);
}
endsnippet


snippet sagaa "Redux saga for async action" b
function* handle$1 (action: any) {
	const { $2 } = action.payload as actions.`!p snip.rv = camel_to_pascal(t[1])`RequestPayload;

	try {
		yield call(api.`!p snip.rv = pascal_to_camel(t[1])`);

		yield put(actions.`!p snip.rv = pascal_to_camel(t[1])`Success({
			_id2,
		}));
	} catch (error) {
		yield put(actions.`!p snip.rv = pascal_to_camel(t[1])`Failure({
			error,
			message: "Failed to $3!",
		}));
	}
}
function* watch`!p snip.rv = camel_to_pascal(t[1])` () {
	yield takeLatest(
		ActionTypes.`!p snip.rv = camel_to_upper_snake(t[1])`_REQUEST, handle`!p snip.rv = camel_to_pascal(t[1])`
	);
}
endsnippet


# -------------------------------------------------------------------------------
# React Snippets
# -------------------------------------------------------------------------------


snippet imr "Import react" b
import * as React from "react";
endsnippet


snippet cmp "Stateless functional component" b
export interface Props {

}

function $1 (props: Props) {
	return (
		<div>

		</div>
	);
}
endsnippet


snippet ccmp "Class based component" b
export interface Props {

}

class $1 extends React.Component<Props> {
	public render () {
		return (
			<div>
				${0}
			</div>
		);
	}
}
endsnippet


snippet rccmp "Redux connected class based component" b
interface StateProps {

}

interface DispatchProps {

}

export type Props = StateProps & DispatchProps;


class $1 extends React.Component<Props> {
	public render () {
		return (
			<div>
				${0}
			</div>
		);
	}
}
endsnippet


snippet mstp "Redux mapStateToProps" b
function mapStateToProps (state: RootState) {
	return {
		${0}
	};
}
endsnippet


snippet mstp "Redux mapDispatchToProps" b
function mapDispatchToProps (dispatch: Dispatch<{}>) {
	return {
		${0}
	};
}
endsnippet
